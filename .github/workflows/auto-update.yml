name: Update yt-dlp and Build App

on:
  schedule:
    # Run weekly
    - cron: '0 2 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-global-${{ runner.os }}-

    - name: Get current yt-dlp version from requirements.txt
      id: current_version
      run: |
        # Extract version from requirements.txt (handles both == and >= formats)
        CURRENT_VERSION=$(grep -E "^yt-dlp\s*[=>]" requirements.txt | head -1 | sed -E 's/^yt-dlp\s*[=>]+\s*([0-9.]+).*/\1/')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current yt-dlp version: $CURRENT_VERSION"

    - name: Get latest yt-dlp version from PyPI
      id: latest_version
      run: |
        LATEST_VERSION=$(curl -s https://pypi.org/pypi/yt-dlp/json | python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])")
        echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "Latest yt-dlp version: $LATEST_VERSION"

    - name: Compare versions and update if needed
      id: version_check
      run: |
        CURRENT="${{ steps.current_version.outputs.current }}"
        LATEST="${{ steps.latest_version.outputs.latest }}"
        
        if [ "$CURRENT" != "$LATEST" ]; then
          echo "needs_update=true" >> $GITHUB_OUTPUT
          echo "yt-dlp needs update from $CURRENT to $LATEST"
        else
          echo "needs_update=false" >> $GITHUB_OUTPUT
          echo "yt-dlp is already up to date ($CURRENT)"
        fi

    - name: Update requirements.txt
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        LATEST_VERSION="${{ steps.latest_version.outputs.latest }}"
        # Update the versioned yt-dlp line
        sed -i -E "s/^yt-dlp\s*==\s*[0-9.]+.*$/yt-dlp == $LATEST_VERSION/" requirements.txt
        echo "Updated requirements.txt with yt-dlp == $LATEST_VERSION"

    - name: Get current app version
      if: steps.version_check.outputs.needs_update == 'true'
      id: current_app_version
      run: |
        CURRENT_APP_VERSION=$(sed -n 's/.*["'\'']\([0-9.]*\)["'\''].*/\1/p' src/_version.py)
        echo "current_app=$CURRENT_APP_VERSION" >> $GITHUB_OUTPUT
        echo "Current app version: $CURRENT_APP_VERSION"

    - name: Bump patch version
      if: steps.version_check.outputs.needs_update == 'true'
      id: bump_version
      run: |
        CURRENT_APP_VERSION=${{ steps.current_app_version.outputs.current_app }}
        
        # Extract version parts
        MAJOR=$(echo $CURRENT_APP_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_APP_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_APP_VERSION | cut -d. -f3)
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        # Update _version.py by writing the entire file content
        echo "__version__ = '$NEW_VERSION'" > src/_version.py
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Bumped version from $CURRENT_APP_VERSION to $NEW_VERSION"

    - name: Create keystore file from secret
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > mykeystore.keystore
        chmod 600 mykeystore.keystore

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
      if: steps.version_check.outputs.needs_update == 'true'

    - name: Create virtual environment and install buildozer
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install buildozer

    - name: Build with Buildozer
      id: buildozer
      if: steps.version_check.outputs.needs_update == 'true'
      env:
        KEYSTORE_FILE: mykeystore.keystore
        KEYSTORE_PASSPHRASE: ${{ secrets.KEYSTORE_PASSPHRASE }}
        ANDROID_SDK_DIR: ${{ github.workspace }}/.buildozer_global/android/platform/android-sdk
      run: |
        source venv/bin/activate
        cd .
        bash utils.sh --build --sign --key mykeystore.keystore --pass "$KEYSTORE_PASSPHRASE"

    - name: Fix git permissions
      run: |
        sudo chown -R $(whoami):$(whoami) .
        sudo chmod -R 755 .git
    
    - name: Commit and push changes
      if: steps.version_check.outputs.needs_update == 'true'
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        git add requirements.txt src/_version.py
        git commit -m "chore: update yt-dlp to ${{ steps.latest_version.outputs.latest }} and bump version to ${{ steps.bump_version.outputs.new_version }}"
        git push

    - name: Create Release
      if: steps.version_check.outputs.needs_update == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ steps.bump_version.outputs.new_version }}"
        name: "Release v${{ steps.bump_version.outputs.new_version }}"
        body: |
          ## Changes
          - Updated yt-dlp from ${{ steps.current_version.outputs.current }} to ${{ steps.latest_version.outputs.latest }}
          - Bumped app version to ${{ steps.bump_version.outputs.new_version }}
          
          ## Built with
          - yt-dlp: ${{ steps.latest_version.outputs.latest }}
          - Build date: ${{ github.run_id }}
        files: "bin/youtube_dl_kivy.apk"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        if [ "${{ steps.version_check.outputs.needs_update }}" == "true" ]; then
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- yt-dlp updated from ${{ steps.current_version.outputs.current }} to ${{ steps.latest_version.outputs.latest }}" >> $GITHUB_STEP_SUMMARY
          echo "- App version bumped to ${{ steps.bump_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- APK built and released successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "## No Update Needed" >> $GITHUB_STEP_SUMMARY
          echo "yt-dlp is already up to date (version ${{ steps.current_version.outputs.current }})" >> $GITHUB_STEP_SUMMARY
          echo "Next check: Next Monday at 2 AM UTC" >> $GITHUB_STEP_SUMMARY
        fi
